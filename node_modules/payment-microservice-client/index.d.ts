import { Server } from 'socket.io';
import { SetupProps } from './models/types';
/**
 *
 * @typedef {object} SetupParams
 * @property {http.Server} object.httpServer - Express server. Only needed if socket server is not passed to
 * the function.
 * @property {number} httpPort - Port where the socket client will be listening
 * @property {io.Server | undefined} socketServer - If passed, this will be the socket server used to
 * set up the connection
 * @property {number} redisPort - Port where the redis server is running. Default to 6379.
 * @property {string} socketPath - Path where the socket server should run on. Only needed if no socket
 * server is passed to the function.
 * @property {string} redisHost - IP on which the redis server is running
 * @property {string} clientName - Application name using this package. Needed for log files.
 * @property {function} connectFn - Function which will be executed on the **on connection**
 * callback of the socket server.
 */
/**
 *
 * @param {SetupParams} params
 */
declare const setup: ({ httpServer, expressApp, httpPort, socketServer, redisPort, socketPath, redisHost, clientName, connectFn, healthEndpoint, key, logLevel, }: SetupProps) => Promise<Server>;
export default setup;
